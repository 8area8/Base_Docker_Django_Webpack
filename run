#!/usr/bin/bash

helpText="
Usage:  . run COMMAND

Some shortcuts for project management.

Git commands
    gitp                git push origin --all command.
    gitpbase            git push base_github base_project

PugJs commands:
    pug <app>           pug translation command.

Django commands:
    app <app>           django startapp command.

NPM commands:
    ni <library>        npm i -D command.
    nu <library>        npm uninstall command.
    ndev                npm run dev command.
    nbuild              npm run build command.
    nlint               npm run lint command.
    ntest               npm run test command.

Pipenv commands:
    i <library>         pipenv install command.
    idev <library>      pipenv install --dev command.
    u <library>         pipenv uninstall command.

Docker commands:
    clean               clean your docker.
    UP                  build and start the services.
    up                  only start the services.
    build               only build the services.
    rmvolumes           remove the docker volumes.
    djbash              docker django shell command.
    restart <service>   restart the service.
    djtest              run the django tests.
    djselenium          run the selenium tests.
    repop               migrate and populate the database.
    otp                 get an otp static token, for admin.
"


if [[ $1 == "LC_ALL=C.UTF-8" ]] || [[ $# -eq 0 ]]
  then
    echo "${helpText}"
fi

DOCKERFILES='-f services/docker-compose.yml -f services/docker-compose.dev.yml'


PARAMS=""
while (( "$#" )); do
    case "$1" in
        # 
        # -- GIT --
        # 
        # Git push origin --all command.
        gitp)
            shift 1
            git push origin --all
        ;;
        # Git push base_github base_project command.
        gitpbase)
            shift 1
            git push base_github base_project
        ;;
        # 
        # -- PUG --
        # 
        # Pug translation command.
        pug)
            APP=$2
            shift 2
            cd services/django/project
            pug $APP
            cd ../../../
        ;;
        # 
        # -- Django --
        # 
        #  Django startapp command.
        app)
            APP=$2
            shift 2
            cd services/django/project
            pipenv run python manage.py startapp $APP
            cd ../../../
        ;;
        # 
        # -- NPM --
        # 
        #  npm run build command.
        nbuild)
            shift 1
            cd services/django/project
            npm run build
            cd ../../../
        ;;
        #  npm run dev command.
        ndev)
            shift 1
            cd services/django/project
            npm run dev
            cd ../../../
        ;;
        #  npm install --dev command.
        ni)
            LIBRARY=$2
            shift 2
            cd services/django/project
            npm i -D $LIBRARY
            cd ../../../
        ;;
        # npm run lint command.
        nlint)
            shift 1
            cd services/django/project
            npm run lint
            cd ../../../
        ;;
        # npm run test command.
        ntest)
            shift 1
            cd services/django/project
            npm run test
            cd ../../../
        ;;
        # 
        # -- PIPENV --
        # 
        # Pipenv install
        i)
            LIBRARY=$2
            shift 2
            cd services/django/project
            pipenv install $LIBRARY
            cd ../../../
        ;;
        #  Pipenv install --dev
        idev)
            LIBRARY=$2
            shift 2
            cd services/django/project
            pipenv install --dev $LIBRARY
            cd ../../../
        ;;
        # Pipenv uninstall.
        u)
            LIBRARY=$2
            shift 2
            cd services/django/project
            pipenv uninstall $LIBRARY
            cd ../../../
        ;;
        # 
        # -- DOCKER --
        # 
        # Build and start services.
        UP)
            shift 1
            docker-compose $DOCKERFILES build
            docker-compose $DOCKERFILES up --force-recreate
        ;;
        # Start services.
        up)
            shift 1
            docker-compose $DOCKERFILES up --force-recreate
        ;;
        # Build services.
        build)
            shift 1
            docker-compose $DOCKERFILES build
        ;;
        # Clean docker.
        clean)
            shift 1
            docker-compose $DOCKERFILES down
            docker stop $(docker ps -aq)
            docker rm $(docker ps -aq)
            docker image prune -f
        ;;
        # Remove volumes.
        rmvolumes)
            shift 1
            docker-compose $DOCKERFILES down
            docker volume rm $(docker volume ls -q)
        ;;
        #  Restart the service.
        restart)
            CONTAINER=$2
            shift 2
            docker-compose $DOCKERFILES restart $CONTAINER
        ;;
        #  Docker django shell command.
        djbash)
            shift 1
            docker-compose $DOCKERFILES exec django bash
        ;;
        #  Run the django tests.
        djtest)
            shift 1
            TEST='pipenv run python3 manage.py test --exclude-tag=selenium'
            docker-compose $DOCKERFILES exec django bash -c "$TEST"
        ;;
        #  Run the selenium tests.
        djselenium)
            shift 1
            TEST='pipenv run python3 manage.py test --tag=selenium'
            docker-compose $DOCKERFILES exec django bash -c "$TEST"
        ;;
        #  Migrate and populate the db.
        repop)
            shift 1
            MIGRATE='pipenv run python3 manage.py migrate'
            POPULATE='pipenv run python3 manage.py setup_dev_db'
            docker-compose $DOCKERFILES exec django bash -c "$MIGRATE && $POPULATE"
        ;;
        #  Get an otp static token.
        otp)
            shift 1
            OTPKEY='pipenv run python3 manage.py addstatictoken admin'
            docker-compose $DOCKERFILES exec django bash -c "$OTPKEY"
        ;;
        # 
        # 
        # Help text.
        --help | -h)
            shift 1
            echo "${helpText}"
        ;;
        --) # end argument parsing
            shift
            break
        ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
        ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
        ;;
    esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"
